#include "stm32f4xx.h"
int hiz=0;
   unsigned int ccr=400;
unsigned int adc;
float voltaj = 10; 
int i;
int a=0;
int HA;
int HB;
int HC;
unsigned int sur =10;

void durum1(){GPIOA->ODR &= ~ GPIO_ODR_OD6; // 101
	GPIOB->ODR &= ~ GPIO_ODR_OD4;
	GPIOA->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_0;
	GPIOC->MODER |= GPIO_MODER_MODER6_0;
	GPIOC->ODR |= GPIO_ODR_OD6;
		GPIOB->MODER |= GPIO_MODER_MODER6_0;
	GPIOB->ODR &= ~ GPIO_ODR_OD6;
	
	GPIOA->MODER |= GPIO_MODER_MODER6_1 ;
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_1 ;
	GPIOC->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOB->MODER |= GPIO_MODER_MODER0_1 ;
	GPIOB->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOC->MODER &= ~ GPIO_MODER_MODER8_1 ;}
void durum2(){GPIOA->ODR &= ~ GPIO_ODR_OD6; //100
	GPIOB->ODR &= ~ GPIO_ODR_OD4;
	GPIOA->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_0;
	GPIOC->MODER |= GPIO_MODER_MODER6_0;
	GPIOC->ODR |= GPIO_ODR_OD6;
		GPIOB->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOA->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOB->MODER |= GPIO_MODER_MODER4_1 ;
	GPIOC->MODER &= ~ GPIO_MODER_MODER6_1 ; 
	GPIOB->MODER &= ~ GPIO_MODER_MODER0_1 ;
	GPIOB->MODER |= GPIO_MODER_MODER6_1 ;
	GPIOC->MODER &= ~ GPIO_MODER_MODER8_1 ;}
void durum3(){GPIOC->ODR &= ~ GPIO_ODR_OD6; // 110
	GPIOB->ODR &= ~ GPIO_ODR_OD4;
	GPIOA->MODER |= GPIO_MODER_MODER6_0;
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_0;
	GPIOC->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOA->ODR |= GPIO_ODR_OD6;
		GPIOB->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOA->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOB->MODER |= GPIO_MODER_MODER4_1 ;
	GPIOC->MODER &= ~ GPIO_MODER_MODER6_1 ; 
	GPIOB->MODER &= ~ GPIO_MODER_MODER0_1 ;
	GPIOB->MODER |= GPIO_MODER_MODER6_1 ;
	GPIOC->MODER &= ~ GPIO_MODER_MODER8_1 ;}
void durum4(){GPIOC->ODR &= ~ GPIO_ODR_OD6; //010
	GPIOB->ODR &= ~ GPIO_ODR_OD4;
	GPIOA->MODER |= GPIO_MODER_MODER6_0;
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_0;
	GPIOC->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOA->ODR |= GPIO_ODR_OD6;
		GPIOB->MODER |= GPIO_MODER_MODER6_0;
	GPIOB->ODR &= ~ GPIO_ODR_OD6;
		
	GPIOA->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_1 ;
	GPIOC->MODER |= GPIO_MODER_MODER6_1 ; 
	GPIOB->MODER &= ~ GPIO_MODER_MODER0_1 ;
	GPIOB->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOC->MODER |= GPIO_MODER_MODER8_1 ;}
void durum5(){GPIOC->ODR &= ~ GPIO_ODR_OD6; //011
	GPIOA->ODR &= ~ GPIO_ODR_OD6;
	GPIOA->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOB->MODER |= GPIO_MODER_MODER4_0;
	GPIOC->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOB->ODR |= GPIO_ODR_OD4;
		GPIOB->MODER |= GPIO_MODER_MODER6_0;
	GPIOB->ODR &= ~ GPIO_ODR_OD6;
		
	GPIOA->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_1 ;
	GPIOC->MODER |= GPIO_MODER_MODER6_1 ; 
	GPIOB->MODER &= ~ GPIO_MODER_MODER0_1 ;
	GPIOB->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOC->MODER |= GPIO_MODER_MODER8_1 ;}
void durum6(){GPIOC->ODR &= ~ GPIO_ODR_OD6; //001
	GPIOA->ODR &= ~ GPIO_ODR_OD6;
	GPIOA->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOB->MODER |= GPIO_MODER_MODER4_0;
	GPIOC->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOB->ODR |= GPIO_ODR_OD4;
	GPIOB->MODER |= GPIO_MODER_MODER6_0;
	GPIOB->ODR &= ~ GPIO_ODR_OD6;
		
	GPIOA->MODER |= GPIO_MODER_MODER6_1 ;
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_1 ;
	GPIOC->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOB->MODER |= GPIO_MODER_MODER0_1 ;
	GPIOB->MODER &= ~ GPIO_MODER_MODER6_1 ;
	GPIOC->MODER &= ~ GPIO_MODER_MODER8_1 ;	}
void TIM3_IRQHandler(){
	TIM3->SR &= ~TIM_SR_UIF;
	adc=ADC1->DR;
	voltaj = (adc/4);
	if(sur<voltaj)
	{
	sur= sur+1;  
	ccr=sur;
	} 
	else 
	{
		sur=voltaj;
	}
	TIM4->CCR1 &= ~TIM_PSC_PSC;
	TIM4->CCR1 |= ccr;
	TIM3->CCR1 &= ~TIM_PSC_PSC;
	TIM3->CCR1 |= ccr;
	TIM3->CCR3 &= ~TIM_PSC_PSC;
	TIM3->CCR3 |= ccr;
}
void EXTI2_IRQHandler()
	{
		EXTI->PR |= EXTI_PR_PR2;
		while(ccr>10)
		{	
			for(i=0;i<10000;i++);
			sur=sur-1;
		ccr=sur;
		voltaj=sur;
			TIM4->CCR1 &= ~TIM_PSC_PSC;
	TIM4->CCR1 |= ccr;
	TIM3->CCR1 &= ~TIM_PSC_PSC;
	TIM3->CCR1 |= ccr;
	TIM3->CCR3 &= ~TIM_PSC_PSC;
	TIM3->CCR3 |= ccr;
			if(GPIOA->IDR & 1<<10)	
	{	HA=1;
	}else 
	{HA=0;
	}if(GPIOA->IDR & 1<<8)
	{HB=1;
	}	else
	{ HB=0;
	} if(GPIOA->IDR & 1<<15)
	{	HC=1;
	} else 
	{ HC=0;
	}
	if(HA==1 && HB==0 && HC==1) // 6 durum
	{ 
	durum1();
	}
	if(HA==1 && HB==0 && HC==0)
	{
	durum2();
	}
	if(HA==1 && HB==1 && HC==0)
	{
	durum3();
	}
	if(HA==0 && HB==1 && HC==0)
	{
	durum4();
	}
	if(HA==0 && HB==1 && HC==1)
	{
	durum5();
	}
	if(HA==0 && HB==0 && HC==1)
	{
	durum6();
	}}
}
	
void EXTI9_5_IRQHandler(){
	EXTI->PR |= EXTI_PR_PR8;
	a=a+1;
	if(GPIOA->IDR & 1<<10)	
	{	HA=1;
	}else 
	{HA=0;
	}if(GPIOA->IDR & 1<<8)
	{HB=1;
	}	else
	{ HB=0;
	} if(GPIOA->IDR & 1<<15)
	{	HC=1;
	} else 
	{ HC=0;
	}
	
	if(HA==1 && HB==0 && HC==1) // 6 durum
	{ 
	durum1();
	}
	if(HA==1 && HB==0 && HC==0)
	{
	durum2();
	}
	if(HA==1 && HB==1 && HC==0)
	{
	durum3();
	}
	if(HA==0 && HB==1 && HC==0)
	{
	durum4();
	}
	if(HA==0 && HB==1 && HC==1)
	{
	durum5();
	}
	if(HA==0 && HB==0 && HC==1)
	{
	durum6();
	}}
void EXTI15_10_IRQHandler(){
	EXTI->PR |= EXTI_PR_PR10 | EXTI_PR_PR15;
	GPIOB->MODER |= GPIO_MODER_MODER6_0;
	GPIOB->MODER |= GPIO_MODER_MODER4_0;
	GPIOB->MODER |= GPIO_MODER_MODER0_0;
	GPIOB->ODR &= ~ GPIO_ODR_OD4;
	GPIOB->ODR &= ~ GPIO_ODR_OD0;
	GPIOB->ODR &= ~ GPIO_ODR_OD6;
		GPIOB->MODER &= ~ GPIO_MODER_MODER6_0;
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_0;
	GPIOB->MODER &= ~ GPIO_MODER_MODER0_0;
	if(GPIOA->IDR & 1<<10)	
	{	HA=1;
	}else 
	{HA=0;
	}if(GPIOA->IDR & 1<<8)
	{HB=1;
	}	else{
	HB=0;
	}if(GPIOA->IDR & 1<<15)
	{		HC=1;
	}	else 
	{	HC=0;
	}
	{

	if(HA==1 && HB==0 && HC==1) // 6 durum
	{ 
	durum1();
	}
	if(HA==1 && HB==0 && HC==0)
	{
	durum2();
	}
	if(HA==1 && HB==1 && HC==0)
	{
	durum3();
	}
	if(HA==0 && HB==1 && HC==0)
	{
	durum4();
	}
	if(HA==0 && HB==1 && HC==1)
	{
	durum5();
	}
	if(HA==0 && HB==0 && HC==1)
	{
	durum6();
	}}
int main(){
	
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
	
	GPIOA->MODER |= GPIO_MODER_MODER6_1; //PA6 PWM A+
	GPIOB->MODER |= GPIO_MODER_MODER5_1;
	GPIOB->MODER |= GPIO_MODER_MODER0_1;// PB0 PWM A-
	GPIOB->MODER |= GPIO_MODER_MODER1_1;
	GPIOA->MODER |= GPIO_MODER_MODER7_1;
	GPIOB->MODER |= GPIO_MODER_MODER6_1; //PB6 PWM B-
	GPIOB->MODER |= GPIO_MODER_MODER7_1;
	GPIOC->MODER |= GPIO_MODER_MODER6_1; //PC6 PWM C+
	GPIOB->MODER |= GPIO_MODER_MODER4_1; //PB4 PWM B+
	GPIOC->MODER |= GPIO_MODER_MODER9_1;
	GPIOC->MODER |= GPIO_MODER_MODER8_1; // PC8 PWM C-
	
	GPIOC->AFR[1] |= 0x00000002;
	
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL4_1;
	GPIOC->AFR[0] |= GPIO_AFRL_AFRL6_1;
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL7_1;
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL6_1;
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL6_1;
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL5_1;
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL0_1;
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL1_1;
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL7_1;
	
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // TIM3 TIM4 ENABLE
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
	
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR4_1; // PULL UP PULL DOWN 
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR6_1;
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR6_1;
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR0_1;
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR6_1;
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR8_1;
	
	GPIOA->MODER |= GPIO_IDR_ID10 | GPIO_IDR_ID8 | GPIO_IDR_ID15 | GPIO_IDR_ID2; //SENSOR VERILERINI ALMAK ICIN
  
	GPIOB->MODER &= ~ GPIO_MODER_MODER4_1 ; //PORTLARI SIFIRLAMAK
	GPIOA->MODER &= ~ GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;  //ADC BUSS PA0 ANALOG GIRIS
  ADC1->CR2 |= ADC_CR2_ADON;
  ADC1->CR2 |=ADC_CR2_CONT;
  ADC1->CR2 |= ADC_CR2_SWSTART;
	adc=ADC1->DR;
	
	TIM3->PSC &= ~TIM_PSC_PSC;
	TIM3->PSC |= 159;
	TIM3->ARR &= ~TIM_PSC_PSC;
	TIM3->ARR |= 1000U;
	TIM3->CCR1 &= ~TIM_PSC_PSC;
	TIM3->CCR1 |= ccr;
	TIM3->CCR2 &= ~TIM_PSC_PSC;
	TIM3->CCR2 |= ccr;
	TIM3->CCR3 &= ~TIM_PSC_PSC;
	TIM3->CCR3 |= ccr;
	TIM3->CCR4 &= ~TIM_PSC_PSC;
	TIM3->CCR4 |= ccr;
	TIM3->DIER |= TIM_DIER_UIE;
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; //SAYMA YONU
	TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E; //ENABLE
	TIM3->CCMR2 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0; 
	NVIC_EnableIRQ(TIM3_IRQn); //INTERRUPT
	
	
	TIM4->PSC &= ~TIM_PSC_PSC;
	TIM4->PSC |= 159;
	TIM4->ARR &= ~TIM_PSC_PSC;
	TIM4->ARR |= 1000U;
	TIM4->CCR1 &= ~TIM_PSC_PSC;
	TIM4->CCR1 |= ccr;
	TIM4->CCR2 &= ~TIM_PSC_PSC;
	TIM4->CCR2 |= ccr;
	TIM4->CCR3 &= ~TIM_PSC_PSC;
	TIM4->CCR3 |= ccr;
	TIM4->CCR4 &= ~TIM_PSC_PSC;
	TIM4->CCR4 |= ccr;
	TIM4->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0;
	TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E;
	TIM4->CCMR2 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
	  
	TIM3->CR1 |= TIM_CR1_CEN;
	TIM4->CR1 |= TIM_CR1_CEN;
	
	EXTI->IMR |= EXTI_IMR_IM8  | EXTI_IMR_IM10| EXTI_IMR_IM15| EXTI_IMR_IM2; // KESME GIRISI PA8, PA10, PA15
	EXTI->RTSR |= EXTI_RTSR_TR8 |  EXTI_RTSR_TR10 |  EXTI_RTSR_TR15 |  EXTI_RTSR_TR2; 
	EXTI->FTSR |= EXTI_FTSR_TR8 |  EXTI_FTSR_TR10 |  EXTI_FTSR_TR15 |  EXTI_FTSR_TR2;	
	
	NVIC_EnableIRQ(40); //10_15 ARASI INTERRUPT
	NVIC_EnableIRQ(23); //5_9 ARASI INTERRUPT
	NVIC_EnableIRQ(8);
	NVIC_EnableIRQ(TIM3_IRQn);
	
	
	if(GPIOA->IDR & 1<<10)	
	{	HA=1;
	}	else 
	{	HA=0;
	}	if(GPIOA->IDR & 1<<8)
	{	HB=1;
	}	else{
	HB=0;
	}	if(GPIOA->IDR & 1<<15)
	{		HC=1;
	}	else 
	{	HC=0;
	}
	while(1){

	if(HA==1 && HB==0 && HC==1) // 6 durum
	{ 
	durum1();
	}
	if(HA==1 && HB==0 && HC==0)
	{
	durum2();
	}
	if(HA==1 && HB==1 && HC==0)
	{
	durum3();
	}
	if(HA==0 && HB==1 && HC==0)
	{
	durum4();
	}
	if(HA==0 && HB==1 && HC==1)
	{
	durum5();
	}
	if(HA==0 && HB==0 && HC==1)
	{
	durum6();
	}}
